/*

  This example creates a BLE peripheral with service that contains a
  characteristic to send example ECG data.

  For Arudino Nano 33 BLE Sense

*/

#include <ArduinoBLE.h>

BLEService ecgService("A22A3B82-63C4-4720-BF3A-6F5EF8CA42D4"); // BLE LED Service

// BLE LED Switch Characteristic - custom 128-bit UUID, read and writable by central
BLEByteCharacteristic ecgVal("A22A3B82-63C4-4720-BF3A-6F5EF8CA42D4", BLERead | BLEWrite);
//BLEByteCharacteristic timeVal(

const int ledPin = LED_BUILTIN; // pin to use for the LED

const int maxLen = 250;
int count = 0;

double times[] = {0.0000,0.0080,0.0160,0.0240,0.0320,0.0400,0.0480,0.0560,0.0640,0.0720, \
0.0800,0.0880,0.0960,0.1040,0.1120,0.1200,0.1280,0.1360,0.1440,0.1520,0.1600,0.1680,0.1760, \
0.1840,0.1920,0.2000,0.2080,0.2160,0.2240,0.2320,0.2400,0.2480,0.2560,0.2640,0.2720,0.2800, \
0.2880,0.2960,0.3040,0.3120,0.3200,0.3280,0.3360,0.3440,0.3520,0.3600,0.3680,0.3760,0.3840, \
0.3920,0.4000,0.4080,0.4160,0.4240,0.4320,0.4400,0.4480,0.4560,0.4640,0.4720,0.4800,0.4880, \
0.4960,0.5040,0.5120,0.5200,0.5280,0.5360,0.5440,0.5520,0.5600,0.5680,0.5760,0.5840,0.5920, \
0.6000,0.6080,0.6160,0.6240,0.6320,0.6400,0.6480,0.6560,0.6640,0.6720,0.6800,0.6880,0.6960, \
0.7040,0.7120,0.7200,0.7280,0.7360,0.7440,0.7520,0.7600,0.7680,0.7760,0.7840,0.7920,0.8000, \
0.8080,0.8160,0.8240,0.8320,0.8400,0.8480,0.8560,0.8640,0.8720,0.8800,0.8880,0.8960,0.9040, \
0.9120,0.9200,0.9280,0.9360,0.9440,0.9520,0.9600,0.9680,0.9760,0.9840,0.9920,1.0000,1.0080, \
1.0160,1.0240,1.0320,1.0400,1.0480,1.0560,1.0640,1.0720,1.0800,1.0880,1.0960,1.1040,1.1120, \
1.1200,1.1280,1.1360,1.1440,1.1520,1.1600,1.1680,1.1760,1.1840,1.1920,1.2000,1.2080,1.2160, \
1.2240,1.2320,1.2400,1.2480,1.2560,1.2640,1.2720,1.2800,1.2880,1.2960,1.3040,1.3120,1.3200, \
1.3280,1.3360,1.3440,1.3520,1.3600,1.3680,1.3760,1.3840,1.3920,1.4000,1.4080,1.4160,1.4240, \
1.4320,1.4400,1.4480,1.4560,1.4640,1.4720,1.4800,1.4880,1.4960,1.5040,1.5120,1.5200,1.5280, \
1.5360,1.5440,1.5520,1.5600,1.5680,1.5760,1.5840,1.5920,1.6000,1.6080,1.6160,1.6240,1.6320, \
1.6400,1.6480,1.6560,1.6640,1.6720,1.6800,1.6880,1.6960,1.7040,1.7120,1.7200,1.7280,1.7360, \
1.7440,1.7520,1.7600,1.7680,1.7760,1.7840,1.7920,1.8000,1.8080,1.8160,1.8240,1.8320,1.8400, \
1.8480,1.8560,1.8640,1.8720,1.8800,1.8880,1.8960,1.9040,1.9120,1.9200,1.9280,1.9360,1.9440, \
1.9520,1.9600,1.9680,1.9760,1.9840,1.9920};

double ecgs[] = {0.0000,0.0000,0.0000,0.0000,0.0050,0.0100,0.0100,0.0250,0.0250,0.0250,0.0250, \
0.0300,0.0300,0.0360,0.0360,0.0360,0.0360,0.0360,0.0420,0.0840,0.2200,0.3560,0.4920,0.6280, \
0.7640,0.9000,1.0720,1.3440,1.6160,1.8880,2.0000,2.0000,2.0000,2.0000,1.7520,1.4800,1.2080, \
0.9360,0.6640,0.3920,0.1200,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0560,0.3280, \
0.6000,0.8720,2.5840,5.5760,8.5680,11.5600,14.5520,17.5440,20.5360,21.2720,11.4800,1.6880, \
-8.1040,-11.9120,-9.7360,-7.5600,-5.3840,-4.1040,-3.0160,-1.9280,-0.9600,-0.6880,-0.4160, \
-0.1440,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0160,0.1520,0.2880,0.4240,0.5600, \
0.6960,0.8320,0.9680,1.4160,1.9600,2.5040,3.0480,3.5920,4.1360,4.6800,5.0000,5.0000,5.0000, \
5.0000,4.8000,4.5280,4.2560,3.9520,3.1360,2.3200,1.5040,0.8960,0.6240,0.3520,0.0800,0.0400, \
0.0200,0.0200,0.0100,0.0100,0.0100,0.0100,0.0100,0.0100,0.0000,0.0000,0.0000,0.0000,0.0000, \
0.0000,0.0000,0.0000,0.0000,0.0050,0.0100,0.0100,0.0250,0.0250,0.0250,0.0250,0.0300,0.0300, \
0.0360,0.0360,0.0360,0.0360,0.0360,0.0420,0.0840,0.2200,0.3560,0.4920,0.6280,0.7640,0.9000, \
1.0720,1.3440,1.6160,1.8880,2.0000,2.0000,2.0000,2.0000,1.7520,1.4800,1.2080,0.9360,0.6640, \
0.3920,0.1200,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0560,0.3280,0.6000,0.8720, \
2.5840,5.5760,8.5680,11.5600,14.5520,17.5440,20.5360,21.2720,11.4800,1.6880,-8.1040,-11.9120, \
-9.7360,-7.5600,-5.3840,-4.1040,-3.0160,-1.9280,-0.9600,-0.6880,-0.4160,-0.1440,0.0000, \
0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0160,0.1520,0.2880,0.4240,0.5600,0.6960,0.8320, \
0.9680,1.4160,1.9600,2.5040,3.0480,3.5920,4.1360,4.6800,5.0000,5.0000,5.0000,5.0000,4.8000, \
4.5280,4.2560,3.9520,3.1360,2.3200,1.5040,0.8960,0.6240,0.3520,0.0800,0.0400,0.0200,0.0200, \
0.0100,0.0100,0.0100,0.0100,0.0100,0.0100,0.0000,0.0000,0.0000,0.0000,0.0000};

void setup() {
  Serial.begin(9600);
  while (!Serial);

  // set LED pin to output mode
  pinMode(ledPin, OUTPUT);

  // begin initialization
  if (!BLE.begin()) {
    Serial.println("starting BLE failed!");

    while (1);
  }

  // set advertised local name and service UUID:
  BLE.setLocalName("ECG");
  BLE.setAdvertisedService(ecgService);


  // add the characteristic to the service
  ecgService.addCharacteristic(ecgVal);
  // add service
  BLE.addService(ecgService);

  ecgVal.writeValue(0);
  //ecgService.addCharacteristic(timeVal);

  // start advertising
  BLE.advertise();

  Serial.println("BLE ECG Peripheral");
}

void loop() {
  // listen for BLE peripherals to connect:
  BLEDevice central = BLE.central();

  // if a central is connected to peripheral:
  if (central) {
    Serial.print("Connected to central: ");
    // print the central's MAC address:
    Serial.println(central.address());

    // while the central is still connected to peripheral:
    while (central.connected()) {

      // timeVal.writeValue(times[count]);
      /*if (ecgVal.writeValue(ecgs[count])) {
        Serial.println(ecgs[count]);
        Serial.println('\n'); 
      }*/

      if (ecgVal.written()) {
        if (ecgVal.value()) {   // any value other than 0
          Serial.println("LED on");
          Serial.println(count);
          digitalWrite(ledPin, HIGH);         // will turn the LED on
          count++;
          if (count == maxLen) { count = 0; } // reset count if it exceeds max array length
        } else {                              // a 0 value
          Serial.println(F("LED off"));
          digitalWrite(ledPin, LOW);          // will turn the LED off
        }
        
      } 
    }
    // when the central disconnects, print it out:
    Serial.print(F("Disconnected from central: "));
    Serial.println(central.address());

  }
}
